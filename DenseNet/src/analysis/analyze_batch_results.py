"""
Script para analizar resultados de procesamiento en lote.
Genera reportes detallados y visualizaciones.

Autor: Asistente AI
Fecha: 2024
"""

import json
import csv
import os
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import pandas as pd
from pathlib import Path
import argparse

def load_batch_results(results_dir):
    """
    Cargar resultados de procesamiento en lote.
    
    Args:
        results_dir: Directorio con los resultados
        
    Returns:
        tuple: (summary, results_df)
    """
    # Buscar archivos de resultados
    summary_files = list(Path(results_dir).glob("batch_prediction_summary_*.json"))
    csv_files = list(Path(results_dir).glob("batch_prediction_results_*.csv"))
    
    if not summary_files or not csv_files:
        print(f"‚ùå No se encontraron archivos de resultados en: {results_dir}")
        return None, None
    
    # Cargar el archivo m√°s reciente
    latest_summary = max(summary_files, key=os.path.getctime)
    latest_csv = max(csv_files, key=os.path.getctime)
    
    print(f"üìÑ Cargando resumen: {latest_summary}")
    print(f"üìä Cargando detalles: {latest_csv}")
    
    # Cargar resumen
    with open(latest_summary, 'r') as f:
        summary = json.load(f)
    
    # Cargar resultados detallados
    results_df = pd.read_csv(latest_csv)
    
    return summary, results_df

def create_visualizations(summary, results_df, output_dir):
    """Crear visualizaciones de los resultados."""
    
    # Configurar estilo
    plt.style.use('seaborn-v0_8')
    sns.set_palette("husl")
    
    # Crear figura con subplots
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('An√°lisis de Resultados - Clasificaci√≥n de Radiograf√≠as de T√≥rax', 
                 fontsize=16, fontweight='bold')
    
    # 1. Distribuci√≥n de clases
    ax1 = axes[0, 0]
    classes = ['Radiograf√≠as de T√≥rax', 'Otras Im√°genes']
    counts = [summary['chest_xray_count'], summary['other_count']]
    colors = ['#2ecc71', '#e74c3c']
    
    bars = ax1.bar(classes, counts, color=colors, alpha=0.8)
    ax1.set_title('Distribuci√≥n de Clases', fontweight='bold')
    ax1.set_ylabel('N√∫mero de Im√°genes')
    
    # Agregar valores en las barras
    for bar, count in zip(bars, counts):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + max(counts)*0.01,
                f'{count:,}', ha='center', va='bottom', fontweight='bold')
    
    # 2. Distribuci√≥n de confianza
    ax2 = axes[0, 1]
    confidences = results_df['confidence'].dropna()
    
    ax2.hist(confidences, bins=30, alpha=0.7, color='#3498db', edgecolor='black')
    ax2.axvline(confidences.mean(), color='red', linestyle='--', 
               label=f'Promedio: {confidences.mean():.3f}')
    ax2.set_title('Distribuci√≥n de Confianza', fontweight='bold')
    ax2.set_xlabel('Confianza')
    ax2.set_ylabel('Frecuencia')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # 3. Confianza por clase
    ax3 = axes[0, 2]
    chest_conf = results_df[results_df['predicted_class'] == 'chest_xray']['confidence']
    other_conf = results_df[results_df['predicted_class'] == 'other_images']['confidence']
    
    ax3.hist([chest_conf, other_conf], bins=20, alpha=0.7, 
            label=['Radiograf√≠as', 'Otras'], color=['#2ecc71', '#e74c3c'])
    ax3.set_title('Confianza por Clase', fontweight='bold')
    ax3.set_xlabel('Confianza')
    ax3.set_ylabel('Frecuencia')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. Progreso de procesamiento
    ax4 = axes[1, 0]
    total = summary['total_images']
    successful = summary['successful_predictions']
    failed = summary['failed_predictions']
    
    labels = ['Exitosos', 'Fallidos']
    sizes = [successful, failed]
    colors = ['#2ecc71', '#e74c3c']
    
    wedges, texts, autotexts = ax4.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',
                                      startangle=90)
    ax4.set_title('Tasa de √âxito', fontweight='bold')
    
    # 5. Distribuci√≥n de probabilidades
    ax5 = axes[1, 1]
    prob_chest = results_df['prob_chest_xray'].dropna()
    prob_other = results_df['prob_other_images'].dropna()
    
    ax5.scatter(prob_chest, prob_other, alpha=0.6, s=20)
    ax5.plot([0, 1], [1, 0], 'r--', alpha=0.5, label='L√≠nea de decisi√≥n')
    ax5.set_title('Probabilidades: T√≥rax vs Otras', fontweight='bold')
    ax5.set_xlabel('Probabilidad Radiograf√≠a de T√≥rax')
    ax5.set_ylabel('Probabilidad Otras Im√°genes')
    ax5.legend()
    ax5.grid(True, alpha=0.3)
    
    # 6. Estad√≠sticas de confianza
    ax6 = axes[1, 2]
    conf_stats = [
        summary['high_confidence_count'],
        summary['medium_confidence_count'],
        summary['low_confidence_count']
    ]
    conf_labels = ['Alta (>90%)', 'Media (70-90%)', 'Baja (<70%)']
    conf_colors = ['#27ae60', '#f39c12', '#e74c3c']
    
    bars = ax6.bar(conf_labels, conf_stats, color=conf_colors, alpha=0.8)
    ax6.set_title('Distribuci√≥n de Confianza', fontweight='bold')
    ax6.set_ylabel('N√∫mero de Im√°genes')
    
    # Agregar valores en las barras
    for bar, count in zip(bars, conf_stats):
        height = bar.get_height()
        ax6.text(bar.get_x() + bar.get_width()/2., height + max(conf_stats)*0.01,
                f'{count:,}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    
    # Guardar visualizaci√≥n
    output_file = os.path.join(output_dir, 'batch_analysis_visualization.png')
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"üìä Visualizaci√≥n guardada en: {output_file}")
    
    plt.show()

def generate_detailed_report(summary, results_df, output_dir):
    """Generar reporte detallado en texto."""
    
    report_file = os.path.join(output_dir, 'detailed_analysis_report.txt')
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write("REPORTE DETALLADO - CLASIFICACI√ìN DE RADIOGRAF√çAS DE T√ìRAX\n")
        f.write("="*80 + "\n\n")
        
        # Resumen general
        f.write("üìä RESUMEN GENERAL\n")
        f.write("-" * 40 + "\n")
        f.write(f"Total de im√°genes procesadas: {summary['total_images']:,}\n")
        f.write(f"Predicciones exitosas: {summary['successful_predictions']:,}\n")
        f.write(f"Predicciones fallidas: {summary['failed_predictions']:,}\n")
        f.write(f"Tasa de √©xito: {summary['successful_predictions']/summary['total_images']*100:.1f}%\n\n")
        
        # Distribuci√≥n de clases
        f.write("üè• DISTRIBUCI√ìN DE CLASES\n")
        f.write("-" * 40 + "\n")
        f.write(f"Radiograf√≠as de t√≥rax: {summary['chest_xray_count']:,} ({summary['chest_xray_percentage']:.1f}%)\n")
        f.write(f"Otras im√°genes: {summary['other_count']:,} ({summary['other_percentage']:.1f}%)\n\n")
        
        # Estad√≠sticas de confianza
        f.write("üìà ESTAD√çSTICAS DE CONFIANZA\n")
        f.write("-" * 40 + "\n")
        f.write(f"Confianza promedio: {summary['average_confidence']:.3f}\n")
        f.write(f"Alta confianza (>90%): {summary['high_confidence_count']:,}\n")
        f.write(f"Confianza media (70-90%): {summary['medium_confidence_count']:,}\n")
        f.write(f"Baja confianza (<70%): {summary['low_confidence_count']:,}\n\n")
        
        # An√°lisis de errores
        if summary['failed_predictions'] > 0:
            f.write("‚ùå AN√ÅLISIS DE ERRORES\n")
            f.write("-" * 40 + "\n")
            f.write(f"Im√°genes con error: {summary['failed_predictions']:,}\n")
            f.write(f"Tasa de error: {summary['failed_predictions']/summary['total_images']*100:.1f}%\n\n")
        
        # Recomendaciones
        f.write("üí° RECOMENDACIONES\n")
        f.write("-" * 40 + "\n")
        
        if summary['chest_xray_percentage'] > 80:
            f.write("‚Ä¢ El dataset parece estar muy sesgado hacia radiograf√≠as de t√≥rax\n")
            f.write("‚Ä¢ Considera balancear el dataset con m√°s im√°genes de otras categor√≠as\n")
        elif summary['chest_xray_percentage'] < 20:
            f.write("‚Ä¢ El dataset tiene pocas radiograf√≠as de t√≥rax\n")
            f.write("‚Ä¢ Considera agregar m√°s radiograf√≠as para mejor entrenamiento\n")
        else:
            f.write("‚Ä¢ El dataset tiene una distribuci√≥n balanceada\n")
            f.write("‚Ä¢ Bueno para entrenamiento y validaci√≥n\n")
        
        if summary['average_confidence'] > 0.9:
            f.write("‚Ä¢ El modelo muestra alta confianza en las predicciones\n")
            f.write("‚Ä¢ Los resultados son muy confiables\n")
        elif summary['average_confidence'] < 0.7:
            f.write("‚Ä¢ El modelo muestra baja confianza en las predicciones\n")
            f.write("‚Ä¢ Considera reentrenar o ajustar el modelo\n")
        else:
            f.write("‚Ä¢ El modelo muestra confianza moderada en las predicciones\n")
            f.write("‚Ä¢ Los resultados son aceptables\n")
        
        if summary['low_confidence_count'] > summary['successful_predictions'] * 0.3:
            f.write("‚Ä¢ Muchas predicciones tienen baja confianza\n")
            f.write("‚Ä¢ Revisa manualmente las im√°genes con baja confianza\n")
    
    print(f"üìÑ Reporte detallado guardado en: {report_file}")

def main():
    """Funci√≥n principal."""
    parser = argparse.ArgumentParser(description='Analizar resultados de procesamiento en lote')
    parser.add_argument('--results_dir', type=str, default='quick_batch_results',
                       help='Directorio con los resultados')
    parser.add_argument('--output_dir', type=str, default='analysis_output',
                       help='Directorio para guardar an√°lisis')
    
    args = parser.parse_args()
    
    print("üîç AN√ÅLISIS DE RESULTADOS DE PROCESAMIENTO EN LOTE")
    print("="*60)
    
    # Crear directorio de salida
    os.makedirs(args.output_dir, exist_ok=True)
    
    # Cargar resultados
    summary, results_df = load_batch_results(args.results_dir)
    
    if summary is None or results_df is None:
        return 1
    
    print(f"‚úÖ Resultados cargados exitosamente")
    print(f"üìä Total de im√°genes: {summary['total_images']:,}")
    
    # Generar visualizaciones
    print("\nüìä Generando visualizaciones...")
    create_visualizations(summary, results_df, args.output_dir)
    
    # Generar reporte detallado
    print("\nüìÑ Generando reporte detallado...")
    generate_detailed_report(summary, results_df, args.output_dir)
    
    print(f"\n‚úÖ An√°lisis completado! Resultados en: {args.output_dir}")
    
    return 0

if __name__ == "__main__":
    exit(main())
